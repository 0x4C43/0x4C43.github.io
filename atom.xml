<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x4C43&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0x4c43.cn/"/>
  <updated>2020-04-05T05:54:42.423Z</updated>
  <id>http://0x4c43.cn/</id>
  
  <author>
    <name>0x4C43</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客图床迁移</title>
    <link href="http://0x4c43.cn/2018/1029/blog-map-bed-migration/"/>
    <id>http://0x4c43.cn/2018/1029/blog-map-bed-migration/</id>
    <published>2018-10-29T10:20:24.000Z</published>
    <updated>2020-04-05T05:54:42.423Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建的时候选择了七牛云作为图床，到目前为止往上传了大概 100 张图片。近日收到七牛云测试域名回收的通知，只好另选其它云存储作为博客图床，网络上已有图床迁移方法，遂参考并记录于此。&lt;/p&gt;
&lt;h1 id=&quot;0x01-下载图片&quot;&gt;&lt;a href=&quot;#0x01-下载图片&quot; 
    
    </summary>
    
      <category term="Others" scheme="http://0x4c43.cn/categories/Others/"/>
    
    
      <category term="图床" scheme="http://0x4c43.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>2018 铁人三项赛 aleph1 Writeup</title>
    <link href="http://0x4c43.cn/2018/1029/2018-triathlon-aleph1-writeup/"/>
    <id>http://0x4c43.cn/2018/1029/2018-triathlon-aleph1-writeup/</id>
    <published>2018-10-29T03:45:08.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-漏洞位置&quot;&gt;&lt;a href=&quot;#0x01-漏洞位置&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞位置&quot;&gt;&lt;/a&gt;0x01 漏洞位置&lt;/h1&gt;&lt;p&gt;程序很简单，调用 fgets() 从 stdin 中读取 1337 bytes 数据
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="pwn" scheme="http://0x4c43.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出 Stack smash 利用</title>
    <link href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/"/>
    <id>http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/</id>
    <published>2018-10-13T11:40:28.000Z</published>
    <updated>2020-04-05T05:47:30.883Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;0x01利用思路&quot;&gt;&lt;a href=&quot;#0x01利用思路&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="Stack smash" scheme="http://0x4c43.cn/tags/Stack-smash/"/>
    
  </entry>
  
  <entry>
    <title>EasyRM2MP3 栈溢出分析</title>
    <link href="http://0x4c43.cn/2018/0814/easyrm2mp3-stack-overflow-analysis/"/>
    <id>http://0x4c43.cn/2018/0814/easyrm2mp3-stack-overflow-analysis/</id>
    <published>2018-08-14T09:50:00.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-漏洞信息&quot;&gt;&lt;a href=&quot;#0x01-漏洞信息&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞信息&quot;&gt;&lt;/a&gt;0x01 漏洞信息&lt;/h1&gt;&lt;p&gt;Easy RM to MP3 Converter 是一款音频文件格式转换工具，根据 
    
    </summary>
    
      <category term="Vulnerability Analysis" scheme="http://0x4c43.cn/categories/Vulnerability-Analysis/"/>
    
    
      <category term="stack overflow" scheme="http://0x4c43.cn/tags/stack-overflow/"/>
    
  </entry>
  
  <entry>
    <title>IDAPyhon 脚本批量分析程序</title>
    <link href="http://0x4c43.cn/2018/0803/idapyhon-script-batch-analysis-program/"/>
    <id>http://0x4c43.cn/2018/0803/idapyhon-script-batch-analysis-program/</id>
    <published>2018-08-03T01:20:18.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;当我们需要对大量二进制文件进行分析时，使用 Python 将其自动化，可以极大的提高效率。&lt;/p&gt;
&lt;h1 id=&quot;0x01-运行-IDA&quot;&gt;&lt;a href=&quot;#0x01-运行-IDA&quot; class=&quot;headerlink&quot; title=&quot;0x01 运行 IDA&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Program Analysis" scheme="http://0x4c43.cn/categories/Program-Analysis/"/>
    
    
      <category term="IDAPython" scheme="http://0x4c43.cn/tags/IDAPython/"/>
    
  </entry>
  
  <entry>
    <title>使用 AFL 进行模糊测试</title>
    <link href="http://0x4c43.cn/2018/0722/use-afl-for-fuzzing/"/>
    <id>http://0x4c43.cn/2018/0722/use-afl-for-fuzzing/</id>
    <published>2018-07-22T13:58:12.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://0x4c43.cn/2018/0722/american-fuzzy-lop/&quot;&gt;American Fuzzy Lop&lt;/a&gt; 中介绍了 AFL 的原理和特性，下面将使用 AFL 对几个常用的应用程序进行模糊测试。&lt;/p&gt;
&lt;h1 id=&quot;0
    
    </summary>
    
      <category term="Fuzz" scheme="http://0x4c43.cn/categories/Fuzz/"/>
    
    
      <category term="Fuzz" scheme="http://0x4c43.cn/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>American Fuzzy Lop</title>
    <link href="http://0x4c43.cn/2018/0722/american-fuzzy-lop/"/>
    <id>http://0x4c43.cn/2018/0722/american-fuzzy-lop/</id>
    <published>2018-07-22T13:50:34.000Z</published>
    <updated>2020-04-05T05:47:31.311Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;AFL 是一种安全导向的模糊测试工具，它采用一种新型的编译时插桩和遗传算法来自动生成测试样本，使用这些样本可触发目标二进制程序中新的内部状态，从而可提高模糊测试的代码覆盖率。与其他插桩模糊测试工具相比，afl-fuzz 的设计更具有实用性：具有适度的性能开销，使用各种高效的
    
    </summary>
    
      <category term="Fuzz" scheme="http://0x4c43.cn/categories/Fuzz/"/>
    
    
      <category term="Fuzz" scheme="http://0x4c43.cn/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>VMWare 中扩展 ubuntu 磁盘空间</title>
    <link href="http://0x4c43.cn/2018/0707/expanding-ubuntu-disk-space-in-vmware/"/>
    <id>http://0x4c43.cn/2018/0707/expanding-ubuntu-disk-space-in-vmware/</id>
    <published>2018-07-07T06:00:23.000Z</published>
    <updated>2020-04-05T05:47:30.727Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于在 VMWare 系统中使用 ubuntu 时安装的软件过多，导致磁盘空间不够用。因此，需要扩展虚拟机的磁盘空间，依照网上找到的方法可完成该过程，便记录在此。&lt;/p&gt;
&lt;h1 id=&quot;0x01-VMWare-设置&quot;&gt;&lt;a href=&quot;#0x01-VMWare-设置&quot; c
    
    </summary>
    
      <category term="Pro&amp;Sol" scheme="http://0x4c43.cn/categories/Pro-Sol/"/>
    
    
      <category term="磁盘空间" scheme="http://0x4c43.cn/tags/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>Heartbleed 漏洞分析</title>
    <link href="http://0x4c43.cn/2018/0701/heartbleed-vulnerability-analysis/"/>
    <id>http://0x4c43.cn/2018/0701/heartbleed-vulnerability-analysis/</id>
    <published>2018-07-01T04:02:14.000Z</published>
    <updated>2020-04-05T05:47:31.099Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-基础知识&quot;&gt;&lt;a href=&quot;#0x01-基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x01 基础知识&quot;&gt;&lt;/a&gt;0x01 基础知识&lt;/h1&gt;&lt;h2 id=&quot;1-SSL协议简介&quot;&gt;&lt;a href=&quot;#1-SSL协议简介&quot; class
    
    </summary>
    
      <category term="Vulnerability Analysis" scheme="http://0x4c43.cn/categories/Vulnerability-Analysis/"/>
    
    
      <category term="Heartbleed" scheme="http://0x4c43.cn/tags/Heartbleed/"/>
    
  </entry>
  
  <entry>
    <title>IA-32 内存模型与地址映射</title>
    <link href="http://0x4c43.cn/2018/0617/ia32-memory-model-and-address-mapping/"/>
    <id>http://0x4c43.cn/2018/0617/ia32-memory-model-and-address-mapping/</id>
    <published>2018-06-17T13:37:12.000Z</published>
    <updated>2020-04-05T05:47:31.311Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;8086 的内部寄存器为 16 bits，同时有 20 根地址线，是第一款支持内存分段模型的处理器，它只工作在实模式下。IA-32(Intel Architecture, 32-bit) 由 1987 年的 8086 处理器发展而来，它的寄存器为 32 bits，有 32 
    
    </summary>
    
      <category term="Operating System" scheme="http://0x4c43.cn/categories/Operating-System/"/>
    
    
      <category term="内存模型" scheme="http://0x4c43.cn/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="地址映射" scheme="http://0x4c43.cn/tags/%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>VMware 与 Credential Guard 不兼容</title>
    <link href="http://0x4c43.cn/2018/0615/vmware-is-not-compatible-with-credential-guard/"/>
    <id>http://0x4c43.cn/2018/0615/vmware-is-not-compatible-with-credential-guard/</id>
    <published>2018-06-15T10:31:34.000Z</published>
    <updated>2020-04-05T05:47:30.731Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-Problem&quot;&gt;&lt;a href=&quot;#0x01-Problem&quot; class=&quot;headerlink&quot; title=&quot;0x01 Problem&quot;&gt;&lt;/a&gt;0x01 Problem&lt;/h1&gt;&lt;p&gt;每次更新完 Windows10 后，使用 VMware Wo
    
    </summary>
    
      <category term="Problems&amp;Solutions" scheme="http://0x4c43.cn/categories/Problems-Solutions/"/>
    
    
      <category term="Credential Guard" scheme="http://0x4c43.cn/tags/Credential-Guard/"/>
    
  </entry>
  
  <entry>
    <title>二进制程序分析框架 angr</title>
    <link href="http://0x4c43.cn/2018/0529/binary-analysis-framework-angr/"/>
    <id>http://0x4c43.cn/2018/0529/binary-analysis-framework-angr/</id>
    <published>2018-05-29T13:30:00.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;angr 是一个功能强大的二进制程序分析框架，可用于程序的静态分析和动态符号执行。支持 x86、ARM、MIPS 和 PPC 架构中 32 bit 和 64 bit 可执行程序的分析。&lt;/p&gt;
&lt;h1 id=&quot;0x01-安装&quot;&gt;&lt;a href=&quot;#0x01-安装&quot; clas
    
    </summary>
    
      <category term="Program Analysis" scheme="http://0x4c43.cn/categories/Program-Analysis/"/>
    
    
      <category term="angr" scheme="http://0x4c43.cn/tags/angr/"/>
    
      <category term="binary analysis" scheme="http://0x4c43.cn/tags/binary-analysis/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统调用与虚拟动态共享库</title>
    <link href="http://0x4c43.cn/2018/0517/linux-system-call-and-virtual-dynamic-shared-library/"/>
    <id>http://0x4c43.cn/2018/0517/linux-system-call-and-virtual-dynamic-shared-library/</id>
    <published>2018-05-17T06:35:20.000Z</published>
    <updated>2020-04-05T05:47:31.099Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;系统调用是应用程序与操作系统间的接口。Linux 下使用 0x80 号中断作为系统调用入口，使用 eax寄存器指定系统调用号，ebx、ecx、edx、esi、edi 和 ebp 用于传递调用参数；Windows 下使用0x2E 号中断作为系统调用入口。&lt;/p&gt;
&lt;p&gt; 直接
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://0x4c43.cn/tags/Linux/"/>
    
      <category term="系统调用" scheme="http://0x4c43.cn/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
      <category term="vsdo" scheme="http://0x4c43.cn/tags/vsdo/"/>
    
  </entry>
  
  <entry>
    <title>Linux 动态链接</title>
    <link href="http://0x4c43.cn/2018/0508/linux-dynamic-link/"/>
    <id>http://0x4c43.cn/2018/0508/linux-dynamic-link/</id>
    <published>2018-05-08T06:53:14.000Z</published>
    <updated>2020-04-05T05:47:31.107Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;动态链接在程序运行时才对组成程序的目标文件进行链接，使用动态链接的方式可使得多个进程共用物理内存中的同一个共享目标文件，从而可节省内存空间。此外，使用动态链接使得各个模块更独立，并方便模块的更新。&lt;/p&gt;
&lt;p&gt;为了验证多个进程是否可以共用物理内存中同一个共享对象文件中的代
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Memory Address" scheme="http://0x4c43.cn/tags/Memory-Address/"/>
    
      <category term="dynamic Linking" scheme="http://0x4c43.cn/tags/dynamic-Linking/"/>
    
  </entry>
  
  <entry>
    <title>Linux 延迟绑定机制</title>
    <link href="http://0x4c43.cn/2018/0429/linux-late-binding-mechanism/"/>
    <id>http://0x4c43.cn/2018/0429/linux-late-binding-mechanism/</id>
    <published>2018-04-29T13:05:02.000Z</published>
    <updated>2020-04-05T05:47:31.107Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;如果使用动态链接方式生成的程序模块中使用大量的函数引用，在程序执行时会花费大量的时间用于模块间函数引用的符号查找和重定位，导致程序性能下降。由于程序中可能存在部分不常用的功能模块，那么在程序开始执行时就完成所有函数的链接工作将会是一种浪费。因此，Linux 系统采用延迟绑定
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="PLT" scheme="http://0x4c43.cn/tags/PLT/"/>
    
      <category term="Lazy Binding" scheme="http://0x4c43.cn/tags/Lazy-Binding/"/>
    
  </entry>
  
  <entry>
    <title>Linux glibc heap house-of-force</title>
    <link href="http://0x4c43.cn/2018/0419/linux-glibc-heap-houseofforce/"/>
    <id>http://0x4c43.cn/2018/0419/linux-glibc-heap-houseofforce/</id>
    <published>2018-04-19T15:10:45.000Z</published>
    <updated>2020-04-05T05:47:30.727Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;该利用方法通过堆溢出漏洞修改 top chunk 的 size 字段，使得 malloc 一块很大的内存可使用 top chunk 进行分配，当更新 top chunk 的 ptr 时会发生整数溢出，从而控制 top chunk ptr 为指定目标内存地址，如 .bss 段
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="heap" scheme="http://0x4c43.cn/tags/heap/"/>
    
      <category term="house-of-force" scheme="http://0x4c43.cn/tags/house-of-force/"/>
    
  </entry>
  
  <entry>
    <title>Linux glibc heap house-of-spirit</title>
    <link href="http://0x4c43.cn/2018/0413/linux-glibc-heap-houseofspirit/"/>
    <id>http://0x4c43.cn/2018/0413/linux-glibc-heap-houseofspirit/</id>
    <published>2018-04-13T02:30:14.000Z</published>
    <updated>2020-04-05T05:47:31.107Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;House of Spirit 利用方法针对 fastbin 中的 chunk，该方法不修改 chunk 结构中的 metadata，而是直接控制释放 chunk 时传递给 free() 函数的指针，使其指向内存中伪造的 fake chunk，free() 函数执行时会将伪
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="heap" scheme="http://0x4c43.cn/tags/heap/"/>
    
      <category term="house-of-spirit" scheme="http://0x4c43.cn/tags/house-of-spirit/"/>
    
  </entry>
  
  <entry>
    <title>配置 Linux Python 开发环境</title>
    <link href="http://0x4c43.cn/2018/0316/configure-linux-python-development-environment/"/>
    <id>http://0x4c43.cn/2018/0316/configure-linux-python-development-environment/</id>
    <published>2018-03-16T11:55:21.000Z</published>
    <updated>2020-04-05T05:47:31.107Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;环境：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://0x4c43.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>zsh 使用笔记</title>
    <link href="http://0x4c43.cn/2018/0310/zsh-notes/"/>
    <id>http://0x4c43.cn/2018/0310/zsh-notes/</id>
    <published>2018-03-10T14:20:17.000Z</published>
    <updated>2020-04-05T05:47:30.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Zsh 是一款功能强大终端（shell）软件，既可以作为交互式终端，也可以作为脚本解释器。它在兼容 Bash 的同时，还有提供了很多改进，例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更高效&lt;br&gt;更好的自动补全&lt;br&gt;更好的文件名展开（通配符展开）&lt;br&gt;可定制性高  
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="zsh" scheme="http://0x4c43.cn/tags/zsh/"/>
    
      <category term="oh-my-zsh" scheme="http://0x4c43.cn/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Linux 堆内存溢出 unlink 攻击</title>
    <link href="http://0x4c43.cn/2017/1231/linux-heap-memory-overflow-unlink-attack/"/>
    <id>http://0x4c43.cn/2017/1231/linux-heap-memory-overflow-unlink-attack/</id>
    <published>2017-12-31T06:53:28.000Z</published>
    <updated>2020-04-05T05:47:30.883Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在二进制漏洞利用中，缓冲区溢出漏洞是最常见的一类漏洞，这类漏洞具有很强的危害性，通常能被攻击者利用并实现任意代码执行。缓冲区溢出漏洞可分为基于栈的内存溢出和基于堆的内存溢出。本文主要介绍如何利用堆内存溢出进行 unlink 攻击，进而实现任意代码执行。&lt;/p&gt;
&lt;p&gt;首先看
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="堆溢出" scheme="http://0x4c43.cn/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
      <category term="unlink" scheme="http://0x4c43.cn/tags/unlink/"/>
    
  </entry>
  
</feed>
