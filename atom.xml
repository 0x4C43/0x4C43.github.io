<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x4C43&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0x4c43.cn/"/>
  <updated>2018-05-30T02:40:52.900Z</updated>
  <id>http://0x4c43.cn/</id>
  
  <author>
    <name>0x4C43</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二进制程序分析框架 angr</title>
    <link href="http://0x4c43.cn/2018/0529/binary-program-analysis-framework-angr/"/>
    <id>http://0x4c43.cn/2018/0529/binary-program-analysis-framework-angr/</id>
    <published>2018-05-29T13:30:00.000Z</published>
    <updated>2018-05-30T02:40:52.900Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;angr 是一个功能强大的二进制程序分析框架，可用于程序的静态分析和动态符号执行。支持 x86、ARM、MIPS 和 PPC 架构中 32 bit 和 64 bit 可执行程序的分析。&lt;/p&gt;
&lt;h1 id=&quot;0x01-安装&quot;&gt;&lt;a href=&quot;#0x01-安装&quot; clas
    
    </summary>
    
      <category term="Program Analysis" scheme="http://0x4c43.cn/categories/Program-Analysis/"/>
    
    
      <category term="angr" scheme="http://0x4c43.cn/tags/angr/"/>
    
      <category term="binary analysis" scheme="http://0x4c43.cn/tags/binary-analysis/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统调用与虚拟动态共享库</title>
    <link href="http://0x4c43.cn/2018/0517/linux-system-calls-and-virtual-dynamic-shared-libraries/"/>
    <id>http://0x4c43.cn/2018/0517/linux-system-calls-and-virtual-dynamic-shared-libraries/</id>
    <published>2018-05-17T06:35:20.000Z</published>
    <updated>2018-05-30T02:40:52.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;系统调用是应用程序与操作系统间的接口。Linux 下使用 0x80 号中断作为系统调用入口，使用 eax寄存器指定系统调用号，ebx、ecx、edx、esi、edi 和 ebp 用于传递调用参数；Windows 下使用0x2E 号中断作为系统调用入口。&lt;/p&gt;
&lt;p&gt; 直接
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://0x4c43.cn/tags/Linux/"/>
    
      <category term="系统调用" scheme="http://0x4c43.cn/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
      <category term="vsdo" scheme="http://0x4c43.cn/tags/vsdo/"/>
    
  </entry>
  
  <entry>
    <title>Linux 动态链接</title>
    <link href="http://0x4c43.cn/2018/0508/linux-dynamic-link/"/>
    <id>http://0x4c43.cn/2018/0508/linux-dynamic-link/</id>
    <published>2018-05-08T06:53:14.000Z</published>
    <updated>2018-05-30T02:40:52.396Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;动态链接在程序运行时才对组成程序的目标文件进行链接，使用动态链接的方式可使得多个进程共用物理内存中的同一个共享目标文件，从而可节省内存空间。此外，使用动态链接使得各个模块更独立，并方便模块的更新。&lt;/p&gt;
&lt;p&gt;为了验证多个进程是否可以共用物理内存中同一个共享对象文件中的代
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Memory Address" scheme="http://0x4c43.cn/tags/Memory-Address/"/>
    
      <category term="dynamic Linking" scheme="http://0x4c43.cn/tags/dynamic-Linking/"/>
    
  </entry>
  
  <entry>
    <title>Linux 延迟绑定机制</title>
    <link href="http://0x4c43.cn/2018/0429/linux-delay-binding-mechanism/"/>
    <id>http://0x4c43.cn/2018/0429/linux-delay-binding-mechanism/</id>
    <published>2018-04-29T13:05:02.000Z</published>
    <updated>2018-05-30T02:40:52.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;如果使用动态链接方式生成的程序模块中使用大量的函数引用，在程序执行时会花费大量的时间用于模块间函数引用的符号查找和重定位，导致程序性能下降。由于程序中可能存在部分不常用的功能模块，那么在程序开始执行时就完成所有函数的链接工作将会是一种浪费。因此，Linux 系统采用延迟绑定
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="PLT" scheme="http://0x4c43.cn/tags/PLT/"/>
    
      <category term="Lazy Binding" scheme="http://0x4c43.cn/tags/Lazy-Binding/"/>
    
  </entry>
  
  <entry>
    <title>Linux glibc heap house-of-force</title>
    <link href="http://0x4c43.cn/2018/0419/linux-glibc-heap-houseofforce/"/>
    <id>http://0x4c43.cn/2018/0419/linux-glibc-heap-houseofforce/</id>
    <published>2018-04-19T15:10:45.000Z</published>
    <updated>2018-05-30T02:40:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;该利用方法通过堆溢出漏洞修改 top chunk 的 size 字段，使得 malloc 一块很大的内存可使用 top chunk 进行分配，当更新 top chunk 的 ptr 时会发生整数溢出，从而控制 top chunk ptr 为指定目标内存地址，如 .bss 段
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="heap" scheme="http://0x4c43.cn/tags/heap/"/>
    
      <category term="house-of-force" scheme="http://0x4c43.cn/tags/house-of-force/"/>
    
  </entry>
  
  <entry>
    <title>Linux glibc heap house-of-spirit</title>
    <link href="http://0x4c43.cn/2018/0413/linux-glibc-heap-houseofspirit/"/>
    <id>http://0x4c43.cn/2018/0413/linux-glibc-heap-houseofspirit/</id>
    <published>2018-04-13T02:30:14.000Z</published>
    <updated>2018-05-30T02:40:53.492Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;House of Spirit 利用方法针对 fastbin 中的 chunk，该方法不修改 chunk 结构中的 metadata，而是直接控制释放 chunk 时传递给 free() 函数的指针，使其指向内存中伪造的 fake chunk，free() 函数执行时会将伪
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="heap" scheme="http://0x4c43.cn/tags/heap/"/>
    
      <category term="house-of-spirit" scheme="http://0x4c43.cn/tags/house-of-spirit/"/>
    
  </entry>
  
  <entry>
    <title>配置 Linux Python 开发环境</title>
    <link href="http://0x4c43.cn/2018/0316/configure-the-linux-python-development-environment/"/>
    <id>http://0x4c43.cn/2018/0316/configure-the-linux-python-development-environment/</id>
    <published>2018-03-16T11:55:21.000Z</published>
    <updated>2018-05-30T02:40:53.472Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;环境：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://0x4c43.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>zsh 使用笔记</title>
    <link href="http://0x4c43.cn/2018/0310/zsh-use-notes/"/>
    <id>http://0x4c43.cn/2018/0310/zsh-use-notes/</id>
    <published>2018-03-10T14:20:17.000Z</published>
    <updated>2018-05-30T02:40:54.848Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Zsh 是一款功能强大终端（shell）软件，既可以作为交互式终端，也可以作为脚本解释器。它在兼容 Bash 的同时，还有提供了很多改进，例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更高效&lt;br&gt;更好的自动补全&lt;br&gt;更好的文件名展开（通配符展开）&lt;br&gt;可定制性高  
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="zsh" scheme="http://0x4c43.cn/tags/zsh/"/>
    
      <category term="oh-my-zsh" scheme="http://0x4c43.cn/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Linux 堆内存溢出 unlink 攻击</title>
    <link href="http://0x4c43.cn/2017/1231/linux-heap-memory-overflow-unlink-attack/"/>
    <id>http://0x4c43.cn/2017/1231/linux-heap-memory-overflow-unlink-attack/</id>
    <published>2017-12-31T06:53:28.000Z</published>
    <updated>2018-05-30T02:40:53.404Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在二进制漏洞利用中，缓冲区溢出漏洞是最常见的一类漏洞，这类漏洞具有很强的危害性，通常能被攻击者利用并实现任意代码执行。缓冲区溢出漏洞可分为基于栈的内存溢出和基于堆的内存溢出。本文主要介绍如何利用堆内存溢出进行 unlink 攻击，进而实现任意代码执行。&lt;/p&gt;
&lt;p&gt;首先看
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="堆溢出" scheme="http://0x4c43.cn/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
      <category term="unlink" scheme="http://0x4c43.cn/tags/unlink/"/>
    
  </entry>
  
  <entry>
    <title>终端复用工具 tmux</title>
    <link href="http://0x4c43.cn/2017/1028/terminal-multiplexing-tool-tmux/"/>
    <id>http://0x4c43.cn/2017/1028/terminal-multiplexing-tool-tmux/</id>
    <published>2017-10-28T14:57:21.000Z</published>
    <updated>2018-05-30T02:40:52.900Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h1&gt;&lt;p&gt;tmux 是一款很好用的终端复用工具，主要有以下两个功能：    &lt;/p&gt;
&lt;blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="tmux" scheme="http://0x4c43.cn/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用笔记</title>
    <link href="http://0x4c43.cn/2017/1028/linux-usage-notes/"/>
    <id>http://0x4c43.cn/2017/1028/linux-usage-notes/</id>
    <published>2017-10-28T13:45:08.000Z</published>
    <updated>2018-05-30T02:40:54.824Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-基本命令&quot;&gt;&lt;a href=&quot;#0x01-基本命令&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本命令&quot;&gt;&lt;/a&gt;0x01 基本命令&lt;/h1&gt;&lt;h2 id=&quot;1-使用终端模式登录&quot;&gt;&lt;a href=&quot;#1-使用终端模式登录&quot; cla
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://0x4c43.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 内存管理与堆</title>
    <link href="http://0x4c43.cn/2017/1024/linux-memory-management-and-heap/"/>
    <id>http://0x4c43.cn/2017/1024/linux-memory-management-and-heap/</id>
    <published>2017-10-24T15:18:34.000Z</published>
    <updated>2018-05-30T02:40:52.732Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;目前各大平台主要有如下几种堆内存管理机制：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="内存管理" scheme="http://0x4c43.cn/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="malloc" scheme="http://0x4c43.cn/tags/malloc/"/>
    
      <category term="堆" scheme="http://0x4c43.cn/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用笔记</title>
    <link href="http://0x4c43.cn/2017/1005/docker-use-notes/"/>
    <id>http://0x4c43.cn/2017/1005/docker-use-notes/</id>
    <published>2017-10-05T08:20:23.000Z</published>
    <updated>2018-05-30T02:40:54.048Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Docker是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业务项目。它基于 Google 公司推出的 Go 语言实现。项目后来加入 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Linux" scheme="http://0x4c43.cn/categories/Linux/"/>
    
    
      <category term="Docker" scheme="http://0x4c43.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>RC4 算法实现</title>
    <link href="http://0x4c43.cn/2017/0919/rc4-algorithm-implementation/"/>
    <id>http://0x4c43.cn/2017/0919/rc4-algorithm-implementation/</id>
    <published>2017-09-19T07:38:29.000Z</published>
    <updated>2018-05-30T02:40:52.880Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;RC4 是一种对称秘钥流加密算法，对称加密算法使用的加密和解密秘钥是相同的，或是从其中一个能很容易推导出另一个。RC4 算法的特点是算法简单，运行速度快，而且密钥长度是可变的，密钥长度范围为 1-256 字节。&lt;/p&gt;
&lt;h1 id=&quot;0x01-算法原理&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="加密解密" scheme="http://0x4c43.cn/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="RC4" scheme="http://0x4c43.cn/tags/RC4/"/>
    
  </entry>
  
  <entry>
    <title>在斐讯 K2 上部署 Shadowsocks 与 Kcptun</title>
    <link href="http://0x4c43.cn/2017/0826/deploy-shadowsocks-and-kcptun-on-fiers-k2/"/>
    <id>http://0x4c43.cn/2017/0826/deploy-shadowsocks-and-kcptun-on-fiers-k2/</id>
    <published>2017-08-26T06:34:57.000Z</published>
    <updated>2018-05-30T11:13:27.931Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;对于程序员来说，能顺畅使用互联网能够很大程度地提高工作效率。所以，通过 SS 来实现代理上网是一个很好的解决方案。此外，对于能使用校园网的学生党而言，还可以使用 SS + IPv6 来实现免流，这样就能把省下来的网费用来买VPS了。&lt;/p&gt;
&lt;p&gt;然而，在 PC 上直接使用
    
    </summary>
    
      <category term="Others" scheme="http://0x4c43.cn/categories/Others/"/>
    
    
      <category term="斐讯 K2" scheme="http://0x4c43.cn/tags/%E6%96%90%E8%AE%AF-K2/"/>
    
      <category term="Shadowsocks" scheme="http://0x4c43.cn/tags/Shadowsocks/"/>
    
      <category term="kcptun，IPv6 免流" scheme="http://0x4c43.cn/tags/kcptun%EF%BC%8CIPv6-%E5%85%8D%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>PE文件中添加节区</title>
    <link href="http://0x4c43.cn/2017/0723/add-section-in-pe-file/"/>
    <id>http://0x4c43.cn/2017/0723/add-section-in-pe-file/</id>
    <published>2017-07-23T08:30:10.000Z</published>
    <updated>2018-05-30T02:40:52.956Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在没有源码的情况下，如果想要修改程序或者给程序添加功能，那么就可以通过打补丁的方式来实现。此外，恶意代码为了隐藏自身会将代码注入到目标系统的合法程序中，该行为被称为恶意代码的感染性。&lt;/p&gt;
&lt;p&gt;打补丁和病毒感染文件都是对目标程序的 PE 文件进行操作，由于 PE 文件每
    
    </summary>
    
      <category term="Windows" scheme="http://0x4c43.cn/categories/Windows/"/>
    
    
      <category term="PE文件" scheme="http://0x4c43.cn/tags/PE%E6%96%87%E4%BB%B6/"/>
    
      <category term="添加节区" scheme="http://0x4c43.cn/tags/%E6%B7%BB%E5%8A%A0%E8%8A%82%E5%8C%BA/"/>
    
      <category term="病毒感染" scheme="http://0x4c43.cn/tags/%E7%97%85%E6%AF%92%E6%84%9F%E6%9F%93/"/>
    
      <category term="打补丁" scheme="http://0x4c43.cn/tags/%E6%89%93%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>使用 firmware-mod-kit 修改固件</title>
    <link href="http://0x4c43.cn/2017/0605/use-firmwaremodkit-to-modify-the-firmware/"/>
    <id>http://0x4c43.cn/2017/0605/use-firmwaremodkit-to-modify-the-firmware/</id>
    <published>2017-06-05T13:45:08.000Z</published>
    <updated>2018-05-30T02:40:54.636Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;firmware-mod-kit 工具包可用于提取固件中的文件系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。&lt;/p&gt;
&lt;p&gt;该工具包支持以下
    
    </summary>
    
      <category term="Embedded" scheme="http://0x4c43.cn/categories/Embedded/"/>
    
    
      <category term="firmware-mod-kit" scheme="http://0x4c43.cn/tags/firmware-mod-kit/"/>
    
      <category term="firmware" scheme="http://0x4c43.cn/tags/firmware/"/>
    
  </entry>
  
  <entry>
    <title>DLL 注入之远程线程注入</title>
    <link href="http://0x4c43.cn/2017/0510/remote-thread-injection-for-dll/"/>
    <id>http://0x4c43.cn/2017/0510/remote-thread-injection-for-dll/</id>
    <published>2017-05-10T13:45:08.000Z</published>
    <updated>2018-05-30T02:40:52.064Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 Windows 中有多种方法实现 DLL 注入，&lt;a href=&quot;http://0x4c43.cn/DLL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96/&quot;&gt;可以使用消息钩子注入 DLL&lt;/
    
    </summary>
    
      <category term="Windows" scheme="http://0x4c43.cn/categories/Windows/"/>
    
    
      <category term="DLL 注入" scheme="http://0x4c43.cn/tags/DLL-%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>DLL 注入之 Windows 消息钩子</title>
    <link href="http://0x4c43.cn/2017/0508/windows-message-hooks-for-dll-injection/"/>
    <id>http://0x4c43.cn/2017/0508/windows-message-hooks-for-dll-injection/</id>
    <published>2017-05-08T13:45:08.000Z</published>
    <updated>2018-05-30T02:40:52.220Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Windows 下的窗口应用程序是基于事件驱动方式工作的，操作系统中点击鼠标和按下键盘都是一种事件，当事件发生时操作系统会将消息发送给相应的应用程序，应用程序收到消息之后会做出响应。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;钩子(Hook)，是Windows提供的一种截获和
    
    </summary>
    
      <category term="Windows" scheme="http://0x4c43.cn/categories/Windows/"/>
    
    
      <category term="DLL 注入" scheme="http://0x4c43.cn/tags/DLL-%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Hook" scheme="http://0x4c43.cn/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>复现 NSA Enternalblue SMB 漏洞</title>
    <link href="http://0x4c43.cn/2017/0427/replicated-nsa-enternalblue-smb-vulnerability/"/>
    <id>http://0x4c43.cn/2017/0427/replicated-nsa-enternalblue-smb-vulnerability/</id>
    <published>2017-04-27T09:18:08.000Z</published>
    <updated>2018-05-30T11:13:27.131Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;2017年4月14日，Shadow Brokers 再次公开了大量从 NSA 的方程式组织（Equation Group）处窃取的攻击工具，这些工具主要针对 Windows 系统的漏洞，其中还有几个 0 day。工具中的 fuzzbunch 是一个类似于 metasploi
    
    </summary>
    
      <category term="Exploit" scheme="http://0x4c43.cn/categories/Exploit/"/>
    
    
      <category term="Enternalblue" scheme="http://0x4c43.cn/tags/Enternalblue/"/>
    
      <category term="Doublepulsar" scheme="http://0x4c43.cn/tags/Doublepulsar/"/>
    
      <category term="SMB" scheme="http://0x4c43.cn/tags/SMB/"/>
    
      <category term="Metasploit" scheme="http://0x4c43.cn/tags/Metasploit/"/>
    
  </entry>
  
</feed>
